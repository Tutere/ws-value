// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator erd {
    provider = "prisma-erd-generator"
    theme    = "dark"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      ProjectMember[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum ProjectRole {
    OWNER
    ADMIN
    MEMBER
}

model ProjectMember {
    id             String           @id @default(cuid())
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    userId         String
    projectId      String
    user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
    role           ProjectRole      @default(MEMBER)
    ActivityMember ActivityMember[]

    @@index([userId])
    @@index([projectId])
}

model ActivityMember {
    id              String        @id @default(cuid())
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    members         ProjectMember @relation(fields: [projectMemberId], references: [id])
    projectMemberId String
    activity        Activity      @relation(fields: [activityId], references: [id], onDelete: Cascade)
    activityId      String

    @@index([projectMemberId])
    @@index([activityId])
}

model Project {
    icon               String?
    id                 String          @id @default(cuid())
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt
    colour             String?
    name               String
    description        String?         @db.Text
    goal               String
    estimatedStart     DateTime        @default(now())
    estimatedEnd       DateTime?
    trigger            String?         @db.Text
    //shown as expected outcomes on the page
    expectedMovement   String?         @db.Text
    alternativeOptions String?         @db.Text
    estimatedRisk      String?         @db.Text
    outcomeScore       Int?
    effortScore        Int?
    status             String
    actualStart        DateTime?
    actualEnd          DateTime?
    lessonsLearnt      String?         @db.Text
    retrospective      String?         @db.Text
    members            ProjectMember[]
    Activity           Activity[]
    stakeholders       String?
    pid                String?

    // ProjectTracker     ProjectTracker[]
    // ActivityTracker    ActivityTracker[]
    StakeholderResponse StakeholderResponse[]
}

model Activity {
    id                String           @id @default(cuid())
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt
    projectId         String
    project           Project          @relation(fields: [projectId], references: [id])
    name              String
    description       String           @db.Text
    engagementPattern String           @db.Text
    valueCreated      String?          @db.Text
    startDate         DateTime?
    endDate           DateTime?
    status            String
    outcomeScore      Int?
    effortScore       Int?
    stakeholders      String?
    members           ActivityMember[]
    hours             Int?
    // ActivityTracker   ActivityTracker[]

    @@index([projectId])
}

model ProjectTracker {
    id                 String    @id @default(cuid())
    changeType         String
    createdAt          DateTime  @default(now())
    name               String
    description        String?   @db.Text
    goal               String
    estimatedStart     DateTime  @default(now())
    estimatedEnd       DateTime?
    trigger            String?   @db.Text
    expectedMovement   String?   @db.Text
    alternativeOptions String?   @db.Text
    estimatedRisk      String?   @db.Text
    outcomeScore       Int?
    effortScore        Int?
    status             String
    actualStart        DateTime?
    actualEnd          DateTime?
    lessonsLearnt      String?   @db.Text
    retrospective      String?   @db.Text
    // project            Project   @relation(fields: [projectId], references: [id])
    projectId          String
    icon               String?
    colour             String?
    members            String?   @db.Text
    // Activity           Activity[]     *** Need to organise how these will be stored in projectTracker
    stakeholders       String?
    pid                String?

    // @@index([projectId])
}

model ActivityTracker {
    id                String    @id @default(cuid())
    changeType        String
    createdAt         DateTime  @default(now())
    projectId         String
    // project           Project   @relation(fields: [projectId], references: [id])
    name              String
    description       String    @db.Text
    engagementPattern String    @db.Text
    valueCreated      String?
    startDate         DateTime?
    endDate           DateTime?
    // activity          Activity  @relation(fields: [activityId], references: [id])
    activityId        String
    status            String?
    outcomeScore      Int?
    effortScore       Int?
    hours             Int?
    stakeholders      String?
    members           String?   @db.Text

    @@index([projectId])
    @@index([activityId])
}

model StakeholderResponse {
    id               String   @id @default(cuid())
    project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId        String
    organisation     String
    benefitsRating   Int?
    experienceRating Int?
    improvements     String?
    complaints       String?
    createdAt        DateTime @default(now())

    @@index([projectId])
}
